{"version":3,"file":"asyncMap.js","sourceRoot":"","sources":["../../../src/utilities/observables/asyncMap.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAI7C,MAAM,UAAU,QAAQ,CACtB,UAAyB,EACzB,KAAuC,EACvC,OAA4C;IAE5C,OAAO,IAAI,UAAU,CAAI,UAAC,QAAQ;QACxB,IAAA,IAAI,GAAsB,QAAQ,KAA9B,EAAE,KAAK,GAAe,QAAQ,MAAvB,EAAE,QAAQ,GAAK,QAAQ,SAAb,CAAc;QAC3C,IAAI,mBAAmB,GAAG,CAAC,CAAC;QAC5B,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,YAAY,GAAG;YAIjB,IAAI,YAAC,QAAmB;gBACtB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,QAAQ,EAAE,CAAC,EAAnB,CAAmB,CAAC,CAAC;YACvD,CAAC;SACe,CAAC;QAEnB,SAAS,YAAY,CACnB,QAAuC,EACvC,QAAoC;YAEpC,IAAI,QAAQ,EAAE;gBACZ,OAAO,UAAC,GAAG;oBACT,EAAE,mBAAmB,CAAC;oBACtB,IAAM,IAAI,GAAG,cAAM,OAAA,QAAQ,CAAC,GAAG,CAAC,EAAb,CAAa,CAAC;oBACjC,YAAY,GAAG,YAAY;yBACxB,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;yBAChB,IAAI,CACH,UAAC,MAAM;wBACL,EAAE,mBAAmB,CAAC;wBACtB,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBACpC,IAAI,SAAS,EAAE;4BACb,OAAO,CAAC,QAAS,EAAE,CAAC;yBACrB;oBACH,CAAC,EACD,UAAC,KAAK;wBACJ,EAAE,mBAAmB,CAAC;wBACtB,MAAM,KAAK,CAAC;oBACd,CAAC,CACF;yBACA,KAAK,CAAC,UAAC,MAAM;wBACZ,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;oBACxC,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC;aACH;iBAAM;gBACL,OAAO,UAAC,GAAG,IAAK,OAAA,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAxC,CAAwC,CAAC;aAC1D;QACH,CAAC;QAED,IAAM,OAAO,GAAgB;YAC3B,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC;YAC/B,KAAK,EAAE,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC;YACnC,QAAQ;gBACN,SAAS,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,mBAAmB,EAAE;oBACxB,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACrC;YACH,CAAC;SACF,CAAC;QAEF,IAAM,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,cAAM,OAAA,GAAG,CAAC,WAAW,EAAE,EAAjB,CAAiB,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { Observer } from \"./Observable.js\";\nimport { Observable } from \"./Observable.js\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>\n): Observable<R> {\n  return new Observable<R>((observer) => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise((resolve) => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error\n    ): (arg: any) => void {\n      if (examiner) {\n        return (arg) => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue\n            .then(both, both)\n            .then(\n              (result) => {\n                --activeCallbackCount;\n                next && next.call(observer, result);\n                if (completed) {\n                  handler.complete!();\n                }\n              },\n              (error) => {\n                --activeCallbackCount;\n                throw error;\n              }\n            )\n            .catch((caught) => {\n              error && error.call(observer, caught);\n            });\n        };\n      } else {\n        return (arg) => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"]}