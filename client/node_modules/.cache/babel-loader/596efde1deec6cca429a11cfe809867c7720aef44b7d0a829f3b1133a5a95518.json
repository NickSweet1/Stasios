{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar tslib = require('tslib');\nvar heyListen = require('hey-listen');\nvar styleValueTypes = require('style-value-types');\nvar sync = require('framesync');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar sync__default = /*#__PURE__*/_interopDefaultLegacy(sync);\nconst clamp = (min, max, v) => Math.min(Math.max(v, min), max);\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({\n  duration = 800,\n  bounce = 0.25,\n  velocity = 0,\n  mass = 1\n}) {\n  let envelope;\n  let derivative;\n  heyListen.warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n  let dampingRatio = 1 - bounce;\n  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n  duration = clamp(minDuration, maxDuration, duration / 1000);\n  if (dampingRatio < 1) {\n    envelope = undampedFreq => {\n      const exponentialDecay = undampedFreq * dampingRatio;\n      const delta = exponentialDecay * duration;\n      const a = exponentialDecay - velocity;\n      const b = calcAngularFreq(undampedFreq, dampingRatio);\n      const c = Math.exp(-delta);\n      return safeMin - a / b * c;\n    };\n    derivative = undampedFreq => {\n      const exponentialDecay = undampedFreq * dampingRatio;\n      const delta = exponentialDecay * duration;\n      const d = delta * velocity + velocity;\n      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n      const f = Math.exp(-delta);\n      const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n      const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n      return factor * ((d - e) * f) / g;\n    };\n  } else {\n    envelope = undampedFreq => {\n      const a = Math.exp(-undampedFreq * duration);\n      const b = (undampedFreq - velocity) * duration + 1;\n      return -safeMin + a * b;\n    };\n    derivative = undampedFreq => {\n      const a = Math.exp(-undampedFreq * duration);\n      const b = (velocity - undampedFreq) * (duration * duration);\n      return a * b;\n    };\n  }\n  const initialGuess = 5 / duration;\n  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n  duration = duration * 1000;\n  if (isNaN(undampedFreq)) {\n    return {\n      stiffness: 100,\n      damping: 10,\n      duration\n    };\n  } else {\n    const stiffness = Math.pow(undampedFreq, 2) * mass;\n    return {\n      stiffness,\n      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n      duration\n    };\n  }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n  let result = initialGuess;\n  for (let i = 1; i < rootIterations; i++) {\n    result = result - envelope(result) / derivative(result);\n  }\n  return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n  return keys.some(key => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n  let springOptions = Object.assign({\n    velocity: 0.0,\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    isResolvedFromDuration: false\n  }, options);\n  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n    const derived = findSpring(options);\n    springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), {\n      velocity: 0.0,\n      mass: 1.0\n    });\n    springOptions.isResolvedFromDuration = true;\n  }\n  return springOptions;\n}\nfunction spring(_a) {\n  var {\n      from = 0.0,\n      to = 1.0,\n      restSpeed = 2,\n      restDelta\n    } = _a,\n    options = tslib.__rest(_a, [\"from\", \"to\", \"restSpeed\", \"restDelta\"]);\n  const state = {\n    done: false,\n    value: from\n  };\n  let {\n    stiffness,\n    damping,\n    mass,\n    velocity,\n    duration,\n    isResolvedFromDuration\n  } = getSpringOptions(options);\n  let resolveSpring = zero;\n  let resolveVelocity = zero;\n  function createSpring() {\n    const initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    const initialDelta = to - from;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    if (restDelta === undefined) {\n      restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n    }\n    if (dampingRatio < 1) {\n      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n      resolveSpring = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n      };\n      resolveVelocity = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));\n      };\n    } else if (dampingRatio === 1) {\n      resolveSpring = t => to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    } else {\n      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n      resolveSpring = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        const freqForT = Math.min(dampedAngularFreq * t, 300);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n      };\n    }\n  }\n  createSpring();\n  return {\n    next: t => {\n      const current = resolveSpring(t);\n      if (!isResolvedFromDuration) {\n        const currentVelocity = resolveVelocity(t) * 1000;\n        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n      } else {\n        state.done = t >= duration;\n      }\n      state.value = state.done ? to : current;\n      return state;\n    },\n    flipTarget: () => {\n      velocity = -velocity;\n      [from, to] = [to, from];\n      createSpring();\n    }\n  };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = _t => 0;\nconst progress = (from, to, value) => {\n  const toFromDifference = to - from;\n  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\nfunction hslaToRgba({\n  hue,\n  saturation,\n  lightness,\n  alpha\n}) {\n  hue /= 360;\n  saturation /= 100;\n  lightness /= 100;\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n  if (!saturation) {\n    red = green = blue = lightness;\n  } else {\n    const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\n    const p = 2 * lightness - q;\n    red = hueToRgb(p, q, hue + 1 / 3);\n    green = hueToRgb(p, q, hue);\n    blue = hueToRgb(p, q, hue - 1 / 3);\n  }\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha\n  };\n}\nconst mixLinearColor = (from, to, v) => {\n  const fromExpo = from * from;\n  const toExpo = to * to;\n  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nconst colorTypes = [styleValueTypes.hex, styleValueTypes.rgba, styleValueTypes.hsla];\nconst getColorType = v => colorTypes.find(type => type.test(v));\nconst notAnimatable = color => `'${color}' is not an animatable color. Use the equivalent color code instead.`;\nconst mixColor = (from, to) => {\n  let fromColorType = getColorType(from);\n  let toColorType = getColorType(to);\n  heyListen.invariant(!!fromColorType, notAnimatable(from));\n  heyListen.invariant(!!toColorType, notAnimatable(to));\n  let fromColor = fromColorType.parse(from);\n  let toColor = toColorType.parse(to);\n  if (fromColorType === styleValueTypes.hsla) {\n    fromColor = hslaToRgba(fromColor);\n    fromColorType = styleValueTypes.rgba;\n  }\n  if (toColorType === styleValueTypes.hsla) {\n    toColor = hslaToRgba(toColor);\n    toColorType = styleValueTypes.rgba;\n  }\n  const blended = Object.assign({}, fromColor);\n  return v => {\n    for (const key in blended) {\n      if (key !== \"alpha\") {\n        blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n      }\n    }\n    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n    return fromColorType.transform(blended);\n  };\n};\nconst zeroPoint = {\n  x: 0,\n  y: 0,\n  z: 0\n};\nconst isNum = v => typeof v === 'number';\nconst combineFunctions = (a, b) => v => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\nfunction getMixer(origin, target) {\n  if (isNum(origin)) {\n    return v => mix(origin, target, v);\n  } else if (styleValueTypes.color.test(origin)) {\n    return mixColor(origin, target);\n  } else {\n    return mixComplex(origin, target);\n  }\n}\nconst mixArray = (from, to) => {\n  const output = [...from];\n  const numValues = output.length;\n  const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n  return v => {\n    for (let i = 0; i < numValues; i++) {\n      output[i] = blendValue[i](v);\n    }\n    return output;\n  };\n};\nconst mixObject = (origin, target) => {\n  const output = Object.assign(Object.assign({}, origin), target);\n  const blendValue = {};\n  for (const key in output) {\n    if (origin[key] !== undefined && target[key] !== undefined) {\n      blendValue[key] = getMixer(origin[key], target[key]);\n    }\n  }\n  return v => {\n    for (const key in blendValue) {\n      output[key] = blendValue[key](v);\n    }\n    return output;\n  };\n};\nfunction analyse(value) {\n  const parsed = styleValueTypes.complex.parse(value);\n  const numValues = parsed.length;\n  let numNumbers = 0;\n  let numRGB = 0;\n  let numHSL = 0;\n  for (let i = 0; i < numValues; i++) {\n    if (numNumbers || typeof parsed[i] === \"number\") {\n      numNumbers++;\n    } else {\n      if (parsed[i].hue !== undefined) {\n        numHSL++;\n      } else {\n        numRGB++;\n      }\n    }\n  }\n  return {\n    parsed,\n    numNumbers,\n    numRGB,\n    numHSL\n  };\n}\nconst mixComplex = (origin, target) => {\n  const template = styleValueTypes.complex.createTransformer(target);\n  const originStats = analyse(origin);\n  const targetStats = analyse(target);\n  const canInterpolate = originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers;\n  if (canInterpolate) {\n    return pipe(mixArray(originStats.parsed, targetStats.parsed), template);\n  } else {\n    heyListen.warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n    return p => `${p > 0 ? target : origin}`;\n  }\n};\nconst mixNumber = (from, to) => p => mix(from, to, p);\nfunction detectMixerFactory(v) {\n  if (typeof v === 'number') {\n    return mixNumber;\n  } else if (typeof v === 'string') {\n    if (styleValueTypes.color.test(v)) {\n      return mixColor;\n    } else {\n      return mixComplex;\n    }\n  } else if (Array.isArray(v)) {\n    return mixArray;\n  } else if (typeof v === 'object') {\n    return mixObject;\n  }\n}\nfunction createMixers(output, ease, customMixer) {\n  const mixers = [];\n  const mixerFactory = customMixer || detectMixerFactory(output[0]);\n  const numMixers = output.length - 1;\n  for (let i = 0; i < numMixers; i++) {\n    let mixer = mixerFactory(output[i], output[i + 1]);\n    if (ease) {\n      const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n      mixer = pipe(easingFunction, mixer);\n    }\n    mixers.push(mixer);\n  }\n  return mixers;\n}\nfunction fastInterpolate([from, to], [mixer]) {\n  return v => mixer(progress(from, to, v));\n}\nfunction slowInterpolate(input, mixers) {\n  const inputLength = input.length;\n  const lastInputIndex = inputLength - 1;\n  return v => {\n    let mixerIndex = 0;\n    let foundMixerIndex = false;\n    if (v <= input[0]) {\n      foundMixerIndex = true;\n    } else if (v >= input[lastInputIndex]) {\n      mixerIndex = lastInputIndex - 1;\n      foundMixerIndex = true;\n    }\n    if (!foundMixerIndex) {\n      let i = 1;\n      for (; i < inputLength; i++) {\n        if (input[i] > v || i === lastInputIndex) {\n          break;\n        }\n      }\n      mixerIndex = i - 1;\n    }\n    const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);\n    return mixers[mixerIndex](progressInRange);\n  };\n}\nfunction interpolate(input, output, {\n  clamp: isClamp = true,\n  ease,\n  mixer\n} = {}) {\n  const inputLength = input.length;\n  heyListen.invariant(inputLength === output.length, 'Both input and output ranges must be the same length');\n  heyListen.invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');\n  if (input[0] > input[inputLength - 1]) {\n    input = [].concat(input);\n    output = [].concat(output);\n    input.reverse();\n    output.reverse();\n  }\n  const mixers = createMixers(output, ease, mixer);\n  const interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);\n  return isClamp ? v => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;\n}\nconst reverseEasing = easing => p => 1 - easing(1 - p);\nconst mirrorEasing = easing => p => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\nconst createExpoIn = power => p => Math.pow(p, power);\nconst createBackIn = power => p => p * p * ((power + 1) * p - power);\nconst createAnticipate = power => {\n  const backEasing = createBackIn(power);\n  return p => (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n};\nconst DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nconst BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nconst BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nconst BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nconst linear = p => p;\nconst easeIn = createExpoIn(2);\nconst easeOut = reverseEasing(easeIn);\nconst easeInOut = mirrorEasing(easeIn);\nconst circIn = p => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\nconst backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nconst backOut = reverseEasing(backIn);\nconst backInOut = mirrorEasing(backIn);\nconst anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);\nconst ca = 4356.0 / 361.0;\nconst cb = 35442.0 / 1805.0;\nconst cc = 16061.0 / 1805.0;\nconst bounceOut = p => {\n  if (p === 1 || p === 0) return p;\n  const p2 = p * p;\n  return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;\n};\nconst bounceIn = reverseEasing(bounceOut);\nconst bounceInOut = p => p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\nfunction defaultEasing(values, easing) {\n  return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n  const numValues = values.length;\n  return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n  return offset.map(o => o * duration);\n}\nfunction keyframes({\n  from = 0,\n  to = 1,\n  ease,\n  offset,\n  duration = 300\n}) {\n  const state = {\n    done: false,\n    value: from\n  };\n  const values = Array.isArray(to) ? to : [from, to];\n  const times = convertOffsetToTimes(offset && offset.length === values.length ? offset : defaultOffset(values), duration);\n  function createInterpolator() {\n    return interpolate(times, values, {\n      ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)\n    });\n  }\n  let interpolator = createInterpolator();\n  return {\n    next: t => {\n      state.value = interpolator(t);\n      state.done = t >= duration;\n      return state;\n    },\n    flipTarget: () => {\n      values.reverse();\n      interpolator = createInterpolator();\n    }\n  };\n}\nfunction decay({\n  velocity = 0,\n  from = 0,\n  power = 0.8,\n  timeConstant = 350,\n  restDelta = 0.5,\n  modifyTarget\n}) {\n  const state = {\n    done: false,\n    value: from\n  };\n  let amplitude = power * velocity;\n  const ideal = from + amplitude;\n  const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n  if (target !== ideal) amplitude = target - from;\n  return {\n    next: t => {\n      const delta = -amplitude * Math.exp(-t / timeConstant);\n      state.done = !(delta > restDelta || delta < -restDelta);\n      state.value = state.done ? target : target + delta;\n      return state;\n    },\n    flipTarget: () => {}\n  };\n}\nconst types = {\n  keyframes,\n  spring,\n  decay\n};\nfunction detectAnimationFromOptions(config) {\n  if (Array.isArray(config.to)) {\n    return keyframes;\n  } else if (types[config.type]) {\n    return types[config.type];\n  }\n  const keys = new Set(Object.keys(config));\n  if (keys.has(\"ease\") || keys.has(\"duration\") && !keys.has(\"dampingRatio\")) {\n    return keyframes;\n  } else if (keys.has(\"dampingRatio\") || keys.has(\"stiffness\") || keys.has(\"mass\") || keys.has(\"damping\") || keys.has(\"restSpeed\") || keys.has(\"restDelta\")) {\n    return spring;\n  }\n  return keyframes;\n}\nfunction loopElapsed(elapsed, duration, delay = 0) {\n  return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration, delay = 0, isForwardPlayback = true) {\n  return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n  return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nconst framesync = update => {\n  const passTimestamp = ({\n    delta\n  }) => update(delta);\n  return {\n    start: () => sync__default[\"default\"].update(passTimestamp, true),\n    stop: () => sync.cancelSync.update(passTimestamp)\n  };\n};\nfunction animate(_a) {\n  var _b, _c;\n  var {\n      from,\n      autoplay = true,\n      driver = framesync,\n      elapsed = 0,\n      repeat: repeatMax = 0,\n      repeatType = \"loop\",\n      repeatDelay = 0,\n      onPlay,\n      onStop,\n      onComplete,\n      onRepeat,\n      onUpdate\n    } = _a,\n    options = tslib.__rest(_a, [\"from\", \"autoplay\", \"driver\", \"elapsed\", \"repeat\", \"repeatType\", \"repeatDelay\", \"onPlay\", \"onStop\", \"onComplete\", \"onRepeat\", \"onUpdate\"]);\n  let {\n    to\n  } = options;\n  let driverControls;\n  let repeatCount = 0;\n  let computedDuration = options.duration;\n  let latest;\n  let isComplete = false;\n  let isForwardPlayback = true;\n  let interpolateFromNumber;\n  const animator = detectAnimationFromOptions(options);\n  if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {\n    interpolateFromNumber = interpolate([0, 100], [from, to], {\n      clamp: false\n    });\n    from = 0;\n    to = 100;\n  }\n  const animation = animator(Object.assign(Object.assign({}, options), {\n    from,\n    to\n  }));\n  function repeat() {\n    repeatCount++;\n    if (repeatType === \"reverse\") {\n      isForwardPlayback = repeatCount % 2 === 0;\n      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n    } else {\n      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n      if (repeatType === \"mirror\") animation.flipTarget();\n    }\n    isComplete = false;\n    onRepeat && onRepeat();\n  }\n  function complete() {\n    driverControls.stop();\n    onComplete && onComplete();\n  }\n  function update(delta) {\n    if (!isForwardPlayback) delta = -delta;\n    elapsed += delta;\n    if (!isComplete) {\n      const state = animation.next(Math.max(0, elapsed));\n      latest = state.value;\n      if (interpolateFromNumber) latest = interpolateFromNumber(latest);\n      isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n    }\n    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);\n    if (isComplete) {\n      if (repeatCount === 0) computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;\n      if (repeatCount < repeatMax) {\n        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n      } else {\n        complete();\n      }\n    }\n  }\n  function play() {\n    onPlay === null || onPlay === void 0 ? void 0 : onPlay();\n    driverControls = driver(update);\n    driverControls.start();\n  }\n  autoplay && play();\n  return {\n    stop: () => {\n      onStop === null || onStop === void 0 ? void 0 : onStop();\n      driverControls.stop();\n    }\n  };\n}\nfunction velocityPerSecond(velocity, frameDuration) {\n  return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\nfunction inertia({\n  from = 0,\n  velocity = 0,\n  min,\n  max,\n  power = 0.8,\n  timeConstant = 750,\n  bounceStiffness = 500,\n  bounceDamping = 10,\n  restDelta = 1,\n  modifyTarget,\n  driver,\n  onUpdate,\n  onComplete,\n  onStop\n}) {\n  let currentAnimation;\n  function isOutOfBounds(v) {\n    return min !== undefined && v < min || max !== undefined && v > max;\n  }\n  function boundaryNearest(v) {\n    if (min === undefined) return max;\n    if (max === undefined) return min;\n    return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n  }\n  function startAnimation(options) {\n    currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n    currentAnimation = animate(Object.assign(Object.assign({}, options), {\n      driver,\n      onUpdate: v => {\n        var _a;\n        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);\n        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);\n      },\n      onComplete,\n      onStop\n    }));\n  }\n  function startSpring(options) {\n    startAnimation(Object.assign({\n      type: \"spring\",\n      stiffness: bounceStiffness,\n      damping: bounceDamping,\n      restDelta\n    }, options));\n  }\n  if (isOutOfBounds(from)) {\n    startSpring({\n      from,\n      velocity,\n      to: boundaryNearest(from)\n    });\n  } else {\n    let target = power * velocity + from;\n    if (typeof modifyTarget !== \"undefined\") target = modifyTarget(target);\n    const boundary = boundaryNearest(target);\n    const heading = boundary === min ? -1 : 1;\n    let prev;\n    let current;\n    const checkBoundary = v => {\n      prev = current;\n      current = v;\n      velocity = velocityPerSecond(v - prev, sync.getFrameData().delta);\n      if (heading === 1 && v > boundary || heading === -1 && v < boundary) {\n        startSpring({\n          from: v,\n          to: boundary,\n          velocity\n        });\n      }\n    };\n    startAnimation({\n      type: \"decay\",\n      from,\n      velocity,\n      timeConstant,\n      power,\n      restDelta,\n      modifyTarget,\n      onUpdate: isOutOfBounds(target) ? checkBoundary : undefined\n    });\n  }\n  return {\n    stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop()\n  };\n}\nconst radiansToDegrees = radians => radians * 180 / Math.PI;\nconst angle = (a, b = zeroPoint) => radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));\nconst applyOffset = (from, to) => {\n  let hasReceivedFrom = true;\n  if (to === undefined) {\n    to = from;\n    hasReceivedFrom = false;\n  }\n  return v => {\n    if (hasReceivedFrom) {\n      return v - from + to;\n    } else {\n      from = v;\n      hasReceivedFrom = true;\n      return to;\n    }\n  };\n};\nconst identity = v => v;\nconst createAttractor = (alterDisplacement = identity) => (constant, origin, v) => {\n  const displacement = origin - v;\n  const springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));\n  return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;\n};\nconst attract = createAttractor();\nconst attractExpo = createAttractor(Math.sqrt);\nconst degreesToRadians = degrees => degrees * Math.PI / 180;\nconst isPoint = point => point.hasOwnProperty('x') && point.hasOwnProperty('y');\nconst isPoint3D = point => isPoint(point) && point.hasOwnProperty('z');\nconst distance1D = (a, b) => Math.abs(a - b);\nfunction distance(a, b) {\n  if (isNum(a) && isNum(b)) {\n    return distance1D(a, b);\n  } else if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    const zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n  }\n}\nconst pointFromVector = (origin, angle, distance) => {\n  angle = degreesToRadians(angle);\n  return {\n    x: distance * Math.cos(angle) + origin.x,\n    y: distance * Math.sin(angle) + origin.y\n  };\n};\nconst toDecimal = (num, precision = 2) => {\n  precision = Math.pow(10, precision);\n  return Math.round(num * precision) / precision;\n};\nconst smoothFrame = (prevValue, nextValue, duration, smoothing = 0) => toDecimal(prevValue + duration * (nextValue - prevValue) / Math.max(smoothing, duration));\nconst smooth = (strength = 50) => {\n  let previousValue = 0;\n  let lastUpdated = 0;\n  return v => {\n    const currentFramestamp = sync.getFrameData().timestamp;\n    const timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;\n    const newValue = timeDelta ? smoothFrame(previousValue, v, timeDelta, strength) : previousValue;\n    lastUpdated = currentFramestamp;\n    previousValue = newValue;\n    return newValue;\n  };\n};\nconst snap = points => {\n  if (typeof points === 'number') {\n    return v => Math.round(v / points) * points;\n  } else {\n    let i = 0;\n    const numPoints = points.length;\n    return v => {\n      let lastDistance = Math.abs(points[0] - v);\n      for (i = 1; i < numPoints; i++) {\n        const point = points[i];\n        const distance = Math.abs(point - v);\n        if (distance === 0) return point;\n        if (distance > lastDistance) return points[i - 1];\n        if (i === numPoints - 1) return point;\n        lastDistance = distance;\n      }\n    };\n  }\n};\nfunction velocityPerFrame(xps, frameDuration) {\n  return xps / (1000 / frameDuration);\n}\nconst wrap = (min, max, v) => {\n  const rangeSize = max - min;\n  return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n};\nconst a = (a1, a2) => 1.0 - 3.0 * a2 + 3.0 * a1;\nconst b = (a1, a2) => 3.0 * a2 - 6.0 * a1;\nconst c = a1 => 3.0 * a1;\nconst calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\nconst getSlope = (t, a1, a2) => 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 10;\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  let currentX;\n  let currentT;\n  let i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n  return currentT;\n}\nconst newtonIterations = 8;\nconst newtonMinSlope = 0.001;\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (let i = 0; i < newtonIterations; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n  if (mX1 === mY1 && mX2 === mY2) return linear;\n  const sampleValues = new Float32Array(kSplineTableSize);\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n  function getTForX(aX) {\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= newtonMinSlope) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n  return t => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\nconst steps = (steps, direction = 'end') => progress => {\n  progress = direction === 'end' ? Math.min(progress, 0.999) : Math.max(progress, 0.001);\n  const expanded = progress * steps;\n  const rounded = direction === 'end' ? Math.floor(expanded) : Math.ceil(expanded);\n  return clamp(0, 1, rounded / steps);\n};\nexports.angle = angle;\nexports.animate = animate;\nexports.anticipate = anticipate;\nexports.applyOffset = applyOffset;\nexports.attract = attract;\nexports.attractExpo = attractExpo;\nexports.backIn = backIn;\nexports.backInOut = backInOut;\nexports.backOut = backOut;\nexports.bounceIn = bounceIn;\nexports.bounceInOut = bounceInOut;\nexports.bounceOut = bounceOut;\nexports.circIn = circIn;\nexports.circInOut = circInOut;\nexports.circOut = circOut;\nexports.clamp = clamp;\nexports.createAnticipate = createAnticipate;\nexports.createAttractor = createAttractor;\nexports.createBackIn = createBackIn;\nexports.createExpoIn = createExpoIn;\nexports.cubicBezier = cubicBezier;\nexports.decay = decay;\nexports.degreesToRadians = degreesToRadians;\nexports.distance = distance;\nexports.easeIn = easeIn;\nexports.easeInOut = easeInOut;\nexports.easeOut = easeOut;\nexports.inertia = inertia;\nexports.interpolate = interpolate;\nexports.isPoint = isPoint;\nexports.isPoint3D = isPoint3D;\nexports.keyframes = keyframes;\nexports.linear = linear;\nexports.mirrorEasing = mirrorEasing;\nexports.mix = mix;\nexports.mixColor = mixColor;\nexports.mixComplex = mixComplex;\nexports.pipe = pipe;\nexports.pointFromVector = pointFromVector;\nexports.progress = progress;\nexports.radiansToDegrees = radiansToDegrees;\nexports.reverseEasing = reverseEasing;\nexports.smooth = smooth;\nexports.smoothFrame = smoothFrame;\nexports.snap = snap;\nexports.spring = spring;\nexports.steps = steps;\nexports.toDecimal = toDecimal;\nexports.velocityPerFrame = velocityPerFrame;\nexports.velocityPerSecond = velocityPerSecond;\nexports.wrap = wrap;","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib","require","heyListen","styleValueTypes","sync","_interopDefaultLegacy","e","sync__default","clamp","min","max","v","Math","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","duration","bounce","velocity","mass","envelope","derivative","warning","dampingRatio","undampedFreq","exponentialDecay","delta","a","b","calcAngularFreq","c","exp","d","pow","f","g","factor","initialGuess","approximateRoot","isNaN","stiffness","damping","sqrt","rootIterations","result","i","durationKeys","physicsKeys","isSpringType","options","keys","some","key","undefined","getSpringOptions","springOptions","assign","isResolvedFromDuration","derived","spring","_a","from","to","restSpeed","restDelta","__rest","state","done","resolveSpring","zero","resolveVelocity","createSpring","initialVelocity","initialDelta","undampedAngularFreq","abs","angularFreq","t","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","next","current","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","needsInterpolation","_t","progress","toFromDifference","mix","hueToRgb","p","q","hslaToRgba","hue","saturation","lightness","alpha","red","green","blue","round","mixLinearColor","fromExpo","toExpo","colorTypes","hex","rgba","hsla","getColorType","find","type","test","notAnimatable","color","mixColor","fromColorType","toColorType","invariant","fromColor","parse","toColor","blended","transform","zeroPoint","x","y","z","isNum","combineFunctions","pipe","transformers","reduce","getMixer","origin","target","mixComplex","mixArray","output","numValues","length","blendValue","map","fromThis","mixObject","analyse","parsed","complex","numNumbers","numRGB","numHSL","template","createTransformer","originStats","targetStats","canInterpolate","mixNumber","detectMixerFactory","Array","isArray","createMixers","ease","customMixer","mixers","mixerFactory","numMixers","mixer","easingFunction","push","fastInterpolate","slowInterpolate","input","inputLength","lastInputIndex","mixerIndex","foundMixerIndex","progressInRange","interpolate","isClamp","concat","reverse","interpolator","reverseEasing","easing","mirrorEasing","createExpoIn","power","createBackIn","createAnticipate","backEasing","DEFAULT_OVERSHOOT_STRENGTH","BOUNCE_FIRST_THRESHOLD","BOUNCE_SECOND_THRESHOLD","BOUNCE_THIRD_THRESHOLD","linear","easeIn","easeOut","easeInOut","circIn","acos","circOut","circInOut","backIn","backOut","backInOut","anticipate","ca","cb","cc","bounceOut","p2","bounceIn","bounceInOut","defaultEasing","values","splice","defaultOffset","_value","convertOffsetToTimes","offset","o","keyframes","times","createInterpolator","decay","timeConstant","modifyTarget","amplitude","ideal","types","detectAnimationFromOptions","config","Set","has","loopElapsed","elapsed","delay","reverseElapsed","isForwardPlayback","hasRepeatDelayElapsed","framesync","update","passTimestamp","start","stop","cancelSync","animate","_b","_c","autoplay","driver","repeat","repeatMax","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate","driverControls","repeatCount","computedDuration","latest","isComplete","interpolateFromNumber","animator","call","animation","complete","play","velocityPerSecond","frameDuration","inertia","bounceStiffness","bounceDamping","currentAnimation","isOutOfBounds","boundaryNearest","startAnimation","startSpring","boundary","heading","prev","checkBoundary","getFrameData","radiansToDegrees","radians","PI","angle","atan2","applyOffset","hasReceivedFrom","identity","createAttractor","alterDisplacement","constant","displacement","springModifiedDisplacement","attract","attractExpo","degreesToRadians","degrees","isPoint","point","hasOwnProperty","isPoint3D","distance1D","distance","xDelta","yDelta","zDelta","pointFromVector","toDecimal","num","precision","smoothFrame","prevValue","nextValue","smoothing","smooth","strength","previousValue","lastUpdated","currentFramestamp","timestamp","timeDelta","newValue","snap","points","numPoints","lastDistance","velocityPerFrame","xps","wrap","rangeSize","a1","a2","calcBezier","getSlope","subdivisionPrecision","subdivisionMaxIterations","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","newtonIterations","newtonMinSlope","newtonRaphsonIterate","aGuessT","currentSlope","kSplineTableSize","kSampleStepSize","cubicBezier","mY1","mY2","sampleValues","Float32Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","steps","direction","expanded","rounded","floor","ceil"],"sources":["C:/Users/nicks/bootcamp/Side Projects/Stasios/client/node_modules/popmotion/dist/popmotion.cjs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar heyListen = require('hey-listen');\nvar styleValueTypes = require('style-value-types');\nvar sync = require('framesync');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar sync__default = /*#__PURE__*/_interopDefaultLegacy(sync);\n\nconst clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    heyListen.warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, duration / 1000);\n    if (dampingRatio < 1) {\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = duration * 1000;\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = Object.assign({ velocity: 0.0, stiffness: 100, damping: 10, mass: 1.0, isResolvedFromDuration: false }, options);\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0.0, mass: 1.0 });\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring(_a) {\n    var { from = 0.0, to = 1.0, restSpeed = 2, restDelta } = _a, options = tslib.__rest(_a, [\"from\", \"to\", \"restSpeed\", \"restDelta\"]);\n    const state = { done: false, value: from };\n    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let resolveVelocity = zero;\n    function createSpring() {\n        const initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n        const initialDelta = to - from;\n        const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (to -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n            resolveVelocity = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (dampingRatio *\n                    undampedAngularFreq *\n                    envelope *\n                    ((Math.sin(angularFreq * t) *\n                        (initialVelocity +\n                            dampingRatio *\n                                undampedAngularFreq *\n                                initialDelta)) /\n                        angularFreq +\n                        initialDelta * Math.cos(angularFreq * t)) -\n                    envelope *\n                        (Math.cos(angularFreq * t) *\n                            (initialVelocity +\n                                dampingRatio *\n                                    undampedAngularFreq *\n                                    initialDelta) -\n                            angularFreq *\n                                initialDelta *\n                                Math.sin(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            resolveSpring = (t) => to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (to -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                const currentVelocity = resolveVelocity(t) * 1000;\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? to : current;\n            return state;\n        },\n        flipTarget: () => {\n            velocity = -velocity;\n            [from, to] = [to, from];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const toExpo = to * to;\n    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nconst colorTypes = [styleValueTypes.hex, styleValueTypes.rgba, styleValueTypes.hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nconst notAnimatable = (color) => `'${color}' is not an animatable color. Use the equivalent color code instead.`;\nconst mixColor = (from, to) => {\n    let fromColorType = getColorType(from);\n    let toColorType = getColorType(to);\n    heyListen.invariant(!!fromColorType, notAnimatable(from));\n    heyListen.invariant(!!toColorType, notAnimatable(to));\n    let fromColor = fromColorType.parse(from);\n    let toColor = toColorType.parse(to);\n    if (fromColorType === styleValueTypes.hsla) {\n        fromColor = hslaToRgba(fromColor);\n        fromColorType = styleValueTypes.rgba;\n    }\n    if (toColorType === styleValueTypes.hsla) {\n        toColor = hslaToRgba(toColor);\n        toColorType = styleValueTypes.rgba;\n    }\n    const blended = Object.assign({}, fromColor);\n    return (v) => {\n        for (const key in blended) {\n            if (key !== \"alpha\") {\n                blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n            }\n        }\n        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n        return fromColorType.transform(blended);\n    };\n};\n\nconst zeroPoint = {\n    x: 0,\n    y: 0,\n    z: 0\n};\nconst isNum = (v) => typeof v === 'number';\n\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nfunction getMixer(origin, target) {\n    if (isNum(origin)) {\n        return (v) => mix(origin, target, v);\n    }\n    else if (styleValueTypes.color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = Object.assign(Object.assign({}, origin), target);\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nfunction analyse(value) {\n    const parsed = styleValueTypes.complex.parse(value);\n    const numValues = parsed.length;\n    let numNumbers = 0;\n    let numRGB = 0;\n    let numHSL = 0;\n    for (let i = 0; i < numValues; i++) {\n        if (numNumbers || typeof parsed[i] === \"number\") {\n            numNumbers++;\n        }\n        else {\n            if (parsed[i].hue !== undefined) {\n                numHSL++;\n            }\n            else {\n                numRGB++;\n            }\n        }\n    }\n    return { parsed, numNumbers, numRGB, numHSL };\n}\nconst mixComplex = (origin, target) => {\n    const template = styleValueTypes.complex.createTransformer(target);\n    const originStats = analyse(origin);\n    const targetStats = analyse(target);\n    const canInterpolate = originStats.numHSL === targetStats.numHSL &&\n        originStats.numRGB === targetStats.numRGB &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.parsed, targetStats.parsed), template);\n    }\n    else {\n        heyListen.warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === 'number') {\n        return mixNumber;\n    }\n    else if (typeof v === 'string') {\n        if (styleValueTypes.color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === 'object') {\n        return mixObject;\n    }\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\nfunction fastInterpolate([from, to], [mixer]) {\n    return (v) => mixer(progress(from, to, v));\n}\nfunction slowInterpolate(input, mixers) {\n    const inputLength = input.length;\n    const lastInputIndex = inputLength - 1;\n    return (v) => {\n        let mixerIndex = 0;\n        let foundMixerIndex = false;\n        if (v <= input[0]) {\n            foundMixerIndex = true;\n        }\n        else if (v >= input[lastInputIndex]) {\n            mixerIndex = lastInputIndex - 1;\n            foundMixerIndex = true;\n        }\n        if (!foundMixerIndex) {\n            let i = 1;\n            for (; i < inputLength; i++) {\n                if (input[i] > v || i === lastInputIndex) {\n                    break;\n                }\n            }\n            mixerIndex = i - 1;\n        }\n        const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);\n        return mixers[mixerIndex](progressInRange);\n    };\n}\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    heyListen.invariant(inputLength === output.length, 'Both input and output ranges must be the same length');\n    heyListen.invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');\n    if (input[0] > input[inputLength - 1]) {\n        input = [].concat(input);\n        output = [].concat(output);\n        input.reverse();\n        output.reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const interpolator = inputLength === 2\n        ? fastInterpolate(input, mixers)\n        : slowInterpolate(input, mixers);\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nconst reverseEasing = easing => p => 1 - easing(1 - p);\nconst mirrorEasing = easing => p => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\nconst createExpoIn = (power) => p => Math.pow(p, power);\nconst createBackIn = (power) => p => p * p * ((power + 1) * p - power);\nconst createAnticipate = (power) => {\n    const backEasing = createBackIn(power);\n    return p => (p *= 2) < 1\n        ? 0.5 * backEasing(p)\n        : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n};\n\nconst DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nconst BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nconst BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nconst BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nconst linear = p => p;\nconst easeIn = createExpoIn(2);\nconst easeOut = reverseEasing(easeIn);\nconst easeInOut = mirrorEasing(easeIn);\nconst circIn = p => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\nconst backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nconst backOut = reverseEasing(backIn);\nconst backInOut = mirrorEasing(backIn);\nconst anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);\nconst ca = 4356.0 / 361.0;\nconst cb = 35442.0 / 1805.0;\nconst cc = 16061.0 / 1805.0;\nconst bounceOut = (p) => {\n    if (p === 1 || p === 0)\n        return p;\n    const p2 = p * p;\n    return p < BOUNCE_FIRST_THRESHOLD\n        ? 7.5625 * p2\n        : p < BOUNCE_SECOND_THRESHOLD\n            ? 9.075 * p2 - 9.9 * p + 3.4\n            : p < BOUNCE_THIRD_THRESHOLD\n                ? ca * p2 - cb * p + cc\n                : 10.8 * p * p - 20.52 * p + 10.72;\n};\nconst bounceIn = reverseEasing(bounceOut);\nconst bounceInOut = (p) => p < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0))\n    : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ from = 0, to = 1, ease, offset, duration = 300, }) {\n    const state = { done: false, value: from };\n    const values = Array.isArray(to) ? to : [from, to];\n    const times = convertOffsetToTimes(offset && offset.length === values.length\n        ? offset\n        : defaultOffset(values), duration);\n    function createInterpolator() {\n        return interpolate(times, values, {\n            ease: Array.isArray(ease) ? ease : defaultEasing(values, ease),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            values.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nfunction decay({ velocity = 0, from = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {\n    const state = { done: false, value: from };\n    let amplitude = power * velocity;\n    const ideal = from + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    if (target !== ideal)\n        amplitude = target - from;\n    return {\n        next: (t) => {\n            const delta = -amplitude * Math.exp(-t / timeConstant);\n            state.done = !(delta > restDelta || delta < -restDelta);\n            state.value = state.done ? target : target + delta;\n            return state;\n        },\n        flipTarget: () => { },\n    };\n}\n\nconst types = { keyframes, spring, decay };\nfunction detectAnimationFromOptions(config) {\n    if (Array.isArray(config.to)) {\n        return keyframes;\n    }\n    else if (types[config.type]) {\n        return types[config.type];\n    }\n    const keys = new Set(Object.keys(config));\n    if (keys.has(\"ease\") ||\n        (keys.has(\"duration\") && !keys.has(\"dampingRatio\"))) {\n        return keyframes;\n    }\n    else if (keys.has(\"dampingRatio\") ||\n        keys.has(\"stiffness\") ||\n        keys.has(\"mass\") ||\n        keys.has(\"damping\") ||\n        keys.has(\"restSpeed\") ||\n        keys.has(\"restDelta\")) {\n        return spring;\n    }\n    return keyframes;\n}\n\nfunction loopElapsed(elapsed, duration, delay = 0) {\n    return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration, delay = 0, isForwardPlayback = true) {\n    return isForwardPlayback\n        ? loopElapsed(duration + -elapsed, duration, delay)\n        : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\n\nconst framesync = (update) => {\n    const passTimestamp = ({ delta }) => update(delta);\n    return {\n        start: () => sync__default[\"default\"].update(passTimestamp, true),\n        stop: () => sync.cancelSync.update(passTimestamp),\n    };\n};\nfunction animate(_a) {\n    var _b, _c;\n    var { from, autoplay = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = \"loop\", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a, options = tslib.__rest(_a, [\"from\", \"autoplay\", \"driver\", \"elapsed\", \"repeat\", \"repeatType\", \"repeatDelay\", \"onPlay\", \"onStop\", \"onComplete\", \"onRepeat\", \"onUpdate\"]);\n    let { to } = options;\n    let driverControls;\n    let repeatCount = 0;\n    let computedDuration = options.duration;\n    let latest;\n    let isComplete = false;\n    let isForwardPlayback = true;\n    let interpolateFromNumber;\n    const animator = detectAnimationFromOptions(options);\n    if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {\n        interpolateFromNumber = interpolate([0, 100], [from, to], {\n            clamp: false,\n        });\n        from = 0;\n        to = 100;\n    }\n    const animation = animator(Object.assign(Object.assign({}, options), { from, to }));\n    function repeat() {\n        repeatCount++;\n        if (repeatType === \"reverse\") {\n            isForwardPlayback = repeatCount % 2 === 0;\n            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n        }\n        else {\n            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n            if (repeatType === \"mirror\")\n                animation.flipTarget();\n        }\n        isComplete = false;\n        onRepeat && onRepeat();\n    }\n    function complete() {\n        driverControls.stop();\n        onComplete && onComplete();\n    }\n    function update(delta) {\n        if (!isForwardPlayback)\n            delta = -delta;\n        elapsed += delta;\n        if (!isComplete) {\n            const state = animation.next(Math.max(0, elapsed));\n            latest = state.value;\n            if (interpolateFromNumber)\n                latest = interpolateFromNumber(latest);\n            isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n        }\n        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);\n        if (isComplete) {\n            if (repeatCount === 0)\n                computedDuration !== null && computedDuration !== void 0 ? computedDuration : (computedDuration = elapsed);\n            if (repeatCount < repeatMax) {\n                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    function play() {\n        onPlay === null || onPlay === void 0 ? void 0 : onPlay();\n        driverControls = driver(update);\n        driverControls.start();\n    }\n    autoplay && play();\n    return {\n        stop: () => {\n            onStop === null || onStop === void 0 ? void 0 : onStop();\n            driverControls.stop();\n        },\n    };\n}\n\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nfunction inertia({ from = 0, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop, }) {\n    let currentAnimation;\n    function isOutOfBounds(v) {\n        return (min !== undefined && v < min) || (max !== undefined && v > max);\n    }\n    function boundaryNearest(v) {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    }\n    function startAnimation(options) {\n        currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n        currentAnimation = animate(Object.assign(Object.assign({}, options), { driver, onUpdate: (v) => {\n                var _a;\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);\n                (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);\n            }, onComplete,\n            onStop }));\n    }\n    function startSpring(options) {\n        startAnimation(Object.assign({ type: \"spring\", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));\n    }\n    if (isOutOfBounds(from)) {\n        startSpring({ from, velocity, to: boundaryNearest(from) });\n    }\n    else {\n        let target = power * velocity + from;\n        if (typeof modifyTarget !== \"undefined\")\n            target = modifyTarget(target);\n        const boundary = boundaryNearest(target);\n        const heading = boundary === min ? -1 : 1;\n        let prev;\n        let current;\n        const checkBoundary = (v) => {\n            prev = current;\n            current = v;\n            velocity = velocityPerSecond(v - prev, sync.getFrameData().delta);\n            if ((heading === 1 && v > boundary) ||\n                (heading === -1 && v < boundary)) {\n                startSpring({ from: v, to: boundary, velocity });\n            }\n        };\n        startAnimation({\n            type: \"decay\",\n            from,\n            velocity,\n            timeConstant,\n            power,\n            restDelta,\n            modifyTarget,\n            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined,\n        });\n    }\n    return {\n        stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop(),\n    };\n}\n\nconst radiansToDegrees = (radians) => (radians * 180) / Math.PI;\n\nconst angle = (a, b = zeroPoint) => radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));\n\nconst applyOffset = (from, to) => {\n    let hasReceivedFrom = true;\n    if (to === undefined) {\n        to = from;\n        hasReceivedFrom = false;\n    }\n    return (v) => {\n        if (hasReceivedFrom) {\n            return v - from + to;\n        }\n        else {\n            from = v;\n            hasReceivedFrom = true;\n            return to;\n        }\n    };\n};\n\nconst identity = (v) => v;\nconst createAttractor = (alterDisplacement = identity) => (constant, origin, v) => {\n    const displacement = origin - v;\n    const springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));\n    return displacement <= 0\n        ? origin + springModifiedDisplacement\n        : origin - springModifiedDisplacement;\n};\nconst attract = createAttractor();\nconst attractExpo = createAttractor(Math.sqrt);\n\nconst degreesToRadians = (degrees) => (degrees * Math.PI) / 180;\n\nconst isPoint = (point) => point.hasOwnProperty('x') && point.hasOwnProperty('y');\n\nconst isPoint3D = (point) => isPoint(point) && point.hasOwnProperty('z');\n\nconst distance1D = (a, b) => Math.abs(a - b);\nfunction distance(a, b) {\n    if (isNum(a) && isNum(b)) {\n        return distance1D(a, b);\n    }\n    else if (isPoint(a) && isPoint(b)) {\n        const xDelta = distance1D(a.x, b.x);\n        const yDelta = distance1D(a.y, b.y);\n        const zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n    }\n}\n\nconst pointFromVector = (origin, angle, distance) => {\n    angle = degreesToRadians(angle);\n    return {\n        x: distance * Math.cos(angle) + origin.x,\n        y: distance * Math.sin(angle) + origin.y\n    };\n};\n\nconst toDecimal = (num, precision = 2) => {\n    precision = Math.pow(10, precision);\n    return Math.round(num * precision) / precision;\n};\n\nconst smoothFrame = (prevValue, nextValue, duration, smoothing = 0) => toDecimal(prevValue +\n    (duration * (nextValue - prevValue)) / Math.max(smoothing, duration));\n\nconst smooth = (strength = 50) => {\n    let previousValue = 0;\n    let lastUpdated = 0;\n    return (v) => {\n        const currentFramestamp = sync.getFrameData().timestamp;\n        const timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;\n        const newValue = timeDelta\n            ? smoothFrame(previousValue, v, timeDelta, strength)\n            : previousValue;\n        lastUpdated = currentFramestamp;\n        previousValue = newValue;\n        return newValue;\n    };\n};\n\nconst snap = (points) => {\n    if (typeof points === 'number') {\n        return (v) => Math.round(v / points) * points;\n    }\n    else {\n        let i = 0;\n        const numPoints = points.length;\n        return (v) => {\n            let lastDistance = Math.abs(points[0] - v);\n            for (i = 1; i < numPoints; i++) {\n                const point = points[i];\n                const distance = Math.abs(point - v);\n                if (distance === 0)\n                    return point;\n                if (distance > lastDistance)\n                    return points[i - 1];\n                if (i === numPoints - 1)\n                    return point;\n                lastDistance = distance;\n            }\n        };\n    }\n};\n\nfunction velocityPerFrame(xps, frameDuration) {\n    return xps / (1000 / frameDuration);\n}\n\nconst wrap = (min, max, v) => {\n    const rangeSize = max - min;\n    return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\nconst a = (a1, a2) => 1.0 - 3.0 * a2 + 3.0 * a1;\nconst b = (a1, a2) => 3.0 * a2 - 6.0 * a1;\nconst c = (a1) => 3.0 * a1;\nconst calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\nconst getSlope = (t, a1, a2) => 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 10;\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        }\n        else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nconst newtonIterations = 8;\nconst newtonMinSlope = 0.001;\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (let i = 0; i < newtonIterations; ++i) {\n        const currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    if (mX1 === mY1 && mX2 === mY2)\n        return linear;\n    const sampleValues = new Float32Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= newtonMinSlope) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nconst steps = (steps, direction = 'end') => (progress) => {\n    progress =\n        direction === 'end' ? Math.min(progress, 0.999) : Math.max(progress, 0.001);\n    const expanded = progress * steps;\n    const rounded = direction === 'end' ? Math.floor(expanded) : Math.ceil(expanded);\n    return clamp(0, 1, rounded / steps);\n};\n\nexports.angle = angle;\nexports.animate = animate;\nexports.anticipate = anticipate;\nexports.applyOffset = applyOffset;\nexports.attract = attract;\nexports.attractExpo = attractExpo;\nexports.backIn = backIn;\nexports.backInOut = backInOut;\nexports.backOut = backOut;\nexports.bounceIn = bounceIn;\nexports.bounceInOut = bounceInOut;\nexports.bounceOut = bounceOut;\nexports.circIn = circIn;\nexports.circInOut = circInOut;\nexports.circOut = circOut;\nexports.clamp = clamp;\nexports.createAnticipate = createAnticipate;\nexports.createAttractor = createAttractor;\nexports.createBackIn = createBackIn;\nexports.createExpoIn = createExpoIn;\nexports.cubicBezier = cubicBezier;\nexports.decay = decay;\nexports.degreesToRadians = degreesToRadians;\nexports.distance = distance;\nexports.easeIn = easeIn;\nexports.easeInOut = easeInOut;\nexports.easeOut = easeOut;\nexports.inertia = inertia;\nexports.interpolate = interpolate;\nexports.isPoint = isPoint;\nexports.isPoint3D = isPoint3D;\nexports.keyframes = keyframes;\nexports.linear = linear;\nexports.mirrorEasing = mirrorEasing;\nexports.mix = mix;\nexports.mixColor = mixColor;\nexports.mixComplex = mixComplex;\nexports.pipe = pipe;\nexports.pointFromVector = pointFromVector;\nexports.progress = progress;\nexports.radiansToDegrees = radiansToDegrees;\nexports.reverseEasing = reverseEasing;\nexports.smooth = smooth;\nexports.smoothFrame = smoothFrame;\nexports.snap = snap;\nexports.spring = spring;\nexports.steps = steps;\nexports.toDecimal = toDecimal;\nexports.velocityPerFrame = velocityPerFrame;\nexports.velocityPerSecond = velocityPerSecond;\nexports.wrap = wrap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}