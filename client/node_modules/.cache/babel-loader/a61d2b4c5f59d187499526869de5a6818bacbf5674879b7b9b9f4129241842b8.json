{"ast":null,"code":"import { calcGeneratorVelocity, pregenerateKeyframes } from '@motionone/generators';\nfunction createGeneratorEasing(createGenerator) {\n  const keyframesCache = new WeakMap();\n  return (options = {}) => {\n    const generatorCache = new Map();\n    const getGenerator = (from = 0, to = 100, velocity = 0, isScale = false) => {\n      const key = `${from}-${to}-${velocity}-${isScale}`;\n      if (!generatorCache.has(key)) {\n        generatorCache.set(key, createGenerator(Object.assign({\n          from,\n          to,\n          velocity,\n          restSpeed: isScale ? 0.05 : 2,\n          restDistance: isScale ? 0.01 : 0.5\n        }, options)));\n      }\n      return generatorCache.get(key);\n    };\n    const getKeyframes = generator => {\n      if (!keyframesCache.has(generator)) {\n        keyframesCache.set(generator, pregenerateKeyframes(generator));\n      }\n      return keyframesCache.get(generator);\n    };\n    return {\n      createAnimation: (keyframes, getOrigin, canUseGenerator, name, motionValue) => {\n        var _a, _b;\n        let settings;\n        const numKeyframes = keyframes.length;\n        let shouldUseGenerator = canUseGenerator && numKeyframes <= 2 && keyframes.every(isNumberOrNull);\n        if (shouldUseGenerator) {\n          const target = keyframes[numKeyframes - 1];\n          const unresolvedOrigin = numKeyframes === 1 ? null : keyframes[0];\n          let velocity = 0;\n          let origin = 0;\n          const prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n          if (prevGenerator) {\n            /**\n             * If we have a generator for this value we can use it to resolve\n             * the animations's current value and velocity.\n             */\n            const {\n              animation,\n              generatorStartTime\n            } = motionValue;\n            const startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n            const currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n            const prevGeneratorCurrent = prevGenerator(currentTime).current;\n            origin = (_a = unresolvedOrigin) !== null && _a !== void 0 ? _a : prevGeneratorCurrent;\n            if (numKeyframes === 1 || numKeyframes === 2 && keyframes[0] === null) {\n              velocity = calcGeneratorVelocity(t => prevGenerator(t).current, currentTime, prevGeneratorCurrent);\n            }\n          } else {\n            origin = (_b = unresolvedOrigin) !== null && _b !== void 0 ? _b : parseFloat(getOrigin());\n          }\n          const generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n          const keyframesMetadata = getKeyframes(generator);\n          settings = Object.assign(Object.assign({}, keyframesMetadata), {\n            easing: \"linear\"\n          });\n          // TODO Add test for this\n          if (motionValue) {\n            motionValue.generator = generator;\n            motionValue.generatorStartTime = performance.now();\n          }\n        } else {\n          const keyframesMetadata = getKeyframes(getGenerator(0, 100));\n          settings = {\n            easing: \"ease\",\n            duration: keyframesMetadata.overshootDuration\n          };\n        }\n        return settings;\n      }\n    };\n  };\n}\nconst isNumberOrNull = value => typeof value !== \"string\";\nexport { createGeneratorEasing };","map":{"version":3,"names":["calcGeneratorVelocity","pregenerateKeyframes","createGeneratorEasing","createGenerator","keyframesCache","WeakMap","options","generatorCache","Map","getGenerator","from","to","velocity","isScale","key","has","set","Object","assign","restSpeed","restDistance","get","getKeyframes","generator","createAnimation","keyframes","getOrigin","canUseGenerator","name","motionValue","_a","_b","settings","numKeyframes","length","shouldUseGenerator","every","isNumberOrNull","target","unresolvedOrigin","origin","prevGenerator","animation","generatorStartTime","startTime","currentTime","performance","now","prevGeneratorCurrent","current","t","parseFloat","includes","keyframesMetadata","easing","duration","overshootDuration","value"],"sources":["C:/Users/nicks/bootcamp/Side Projects/Stasios/client/node_modules/@motionone/dom/dist/easing/create-generator-easing.es.js"],"sourcesContent":["import { calcGeneratorVelocity, pregenerateKeyframes } from '@motionone/generators';\n\nfunction createGeneratorEasing(createGenerator) {\n    const keyframesCache = new WeakMap();\n    return (options = {}) => {\n        const generatorCache = new Map();\n        const getGenerator = (from = 0, to = 100, velocity = 0, isScale = false) => {\n            const key = `${from}-${to}-${velocity}-${isScale}`;\n            if (!generatorCache.has(key)) {\n                generatorCache.set(key, createGenerator(Object.assign({ from,\n                    to,\n                    velocity, restSpeed: isScale ? 0.05 : 2, restDistance: isScale ? 0.01 : 0.5 }, options)));\n            }\n            return generatorCache.get(key);\n        };\n        const getKeyframes = (generator) => {\n            if (!keyframesCache.has(generator)) {\n                keyframesCache.set(generator, pregenerateKeyframes(generator));\n            }\n            return keyframesCache.get(generator);\n        };\n        return {\n            createAnimation: (keyframes, getOrigin, canUseGenerator, name, motionValue) => {\n                var _a, _b;\n                let settings;\n                const numKeyframes = keyframes.length;\n                let shouldUseGenerator = canUseGenerator &&\n                    numKeyframes <= 2 &&\n                    keyframes.every(isNumberOrNull);\n                if (shouldUseGenerator) {\n                    const target = keyframes[numKeyframes - 1];\n                    const unresolvedOrigin = numKeyframes === 1 ? null : keyframes[0];\n                    let velocity = 0;\n                    let origin = 0;\n                    const prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n                    if (prevGenerator) {\n                        /**\n                         * If we have a generator for this value we can use it to resolve\n                         * the animations's current value and velocity.\n                         */\n                        const { animation, generatorStartTime } = motionValue;\n                        const startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n                        const currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n                        const prevGeneratorCurrent = prevGenerator(currentTime).current;\n                        origin = (_a = unresolvedOrigin) !== null && _a !== void 0 ? _a : prevGeneratorCurrent;\n                        if (numKeyframes === 1 ||\n                            (numKeyframes === 2 && keyframes[0] === null)) {\n                            velocity = calcGeneratorVelocity((t) => prevGenerator(t).current, currentTime, prevGeneratorCurrent);\n                        }\n                    }\n                    else {\n                        origin = (_b = unresolvedOrigin) !== null && _b !== void 0 ? _b : parseFloat(getOrigin());\n                    }\n                    const generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n                    const keyframesMetadata = getKeyframes(generator);\n                    settings = Object.assign(Object.assign({}, keyframesMetadata), { easing: \"linear\" });\n                    // TODO Add test for this\n                    if (motionValue) {\n                        motionValue.generator = generator;\n                        motionValue.generatorStartTime = performance.now();\n                    }\n                }\n                else {\n                    const keyframesMetadata = getKeyframes(getGenerator(0, 100));\n                    settings = {\n                        easing: \"ease\",\n                        duration: keyframesMetadata.overshootDuration,\n                    };\n                }\n                return settings;\n            },\n        };\n    };\n}\nconst isNumberOrNull = (value) => typeof value !== \"string\";\n\nexport { createGeneratorEasing };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}